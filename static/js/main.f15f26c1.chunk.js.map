{"version":3,"sources":["img/10_workow.svg","img/5_organizacji.svg","img/7_zbiorek.svg","img/parzenica.svg","components/Data.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Data","className","src","worki","alt","organizacje","zbiorki","Header","href","parzenica","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,+MCc5BC,EATF,WACX,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAKC,IAAOC,IAAI,cACrB,yBAAKF,IAAKG,IAAaD,IAAI,kBAC3B,yBAAKF,IAAKI,IAASF,IAAI,mB,gBCyCdG,EAhDA,WACb,OACE,oCACE,0BAAMN,UAAU,qBACd,4BAAQA,UAAU,UAChB,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,eACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,KACf,yBAAKA,UAAU,KACf,yBAAKA,UAAU,KACf,uBAAGA,UAAU,QAAQO,KAAK,KAA1B,WAGA,uBAAGP,UAAU,QAAQO,KAAK,KAA1B,wBAIF,yBAAKP,UAAU,YACb,uBAAGA,UAAU,OAAOO,KAAK,KAAzB,SAGA,uBAAGP,UAAU,OAAOO,KAAK,KAAzB,gBAGA,uBAAGP,UAAU,OAAOO,KAAK,KAAzB,SAGA,uBAAGP,UAAU,OAAOO,KAAK,KAAzB,0BAGA,uBAAGP,UAAU,OAAOO,KAAK,KAAzB,YAIF,yBAAKP,UAAU,gBACb,qDACmB,6BADnB,+CAIA,yBAAKC,IAAKO,IAAWL,IAAI,WCvBxBM,MAdf,WACE,OACE,oCACE,0BAAMT,UAAU,mBACd,6BAASA,UAAU,aACjB,kBAAC,EAAD,MACA,kBAAC,EAAD,UCAUU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f15f26c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/10_workow.d5346df0.svg\";","module.exports = __webpack_public_path__ + \"static/media/5_organizacji.394aa462.svg\";","module.exports = __webpack_public_path__ + \"static/media/7_zbiorek.20183408.svg\";","module.exports = __webpack_public_path__ + \"static/media/parzenica.8b154201.svg\";","import React from \"react\";\nimport worki from \"../img/10_workow.svg\";\nimport organizacje from \"../img/5_organizacji.svg\";\nimport zbiorki from \"../img/7_zbiorek.svg\";\n\nconst Data = () => {\n  return (\n    <div className=\"data\">\n      <img src={worki} alt=\"10 workow\" />\n      <img src={organizacje} alt=\"5 organizacji\" />\n      <img src={zbiorki} alt=\"7 zbiórek\" />\n    </div>\n  );\n};\nexport default Data;\n","import React from \"react\";\nimport parzenica from \"../img/parzenica.svg\";\n\nconst Header = () => {\n  return (\n    <>\n      <main className=\"header--container\">\n        <header className=\"header\">\n          <div className=\"header--box\"></div>\n          <div className=\"header--box\">\n            <div className=\"one--row\">\n              <div className=\"\"></div>\n              <div className=\"\"></div>\n              <div className=\"\"></div>\n              <a className=\"login\" href=\"#\">\n                Zaloguj\n              </a>\n              <a className=\"login\" href=\"#\">\n                Załóz konto\n              </a>\n            </div>\n            <div className=\"one--row\">\n              <a className=\"menu\" href=\"#\">\n                Start\n              </a>\n              <a className=\"menu\" href=\"#\">\n                O co chodzi?\n              </a>\n              <a className=\"menu\" href=\"#\">\n                O nas\n              </a>\n              <a className=\"menu\" href=\"#\">\n                Fundacja i organizacje\n              </a>\n              <a className=\"menu\" href=\"#\">\n                Kontakt\n              </a>\n            </div>\n            <div className=\"central--box\">\n              <h1>\n                Zacznij pomagać! <br />\n                Oddaj niechciane rzeczy w zaufane ręce\n              </h1>\n              <img src={parzenica} alt=\"\" />\n            </div>\n          </div>\n        </header>\n      </main>\n    </>\n  );\n};\nexport default Header;\n","import React from \"react\";\nimport \"./App.css\";\nimport Data from \"./components/Data\";\nimport Header from \"./components/Header\";\n// import Lights from \"./components/Lights/Lights\";\n\nfunction App() {\n  return (\n    <>\n      <main className=\"main--container\">\n        <section className=\"container\">\n          <Header />\n          <Data />\n        </section>\n      </main>\n      {/* <Lights /> */}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}